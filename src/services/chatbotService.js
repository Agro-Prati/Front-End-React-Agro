/**
 * Servi√ßo para integra√ß√£o com a API do Chatbot (Flask + Gemini)
 * 
 * Este servi√ßo gerencia a comunica√ß√£o com o backend do chatbot,
 * com fallback para respostas hardcoded quando a API real n√£o estiver dispon√≠vel.
 */

const CHATBOT_API_URL = import.meta.env.VITE_CHATBOT_API_URL || 'http://localhost:5000';
const USE_REAL_CHATBOT = import.meta.env.VITE_USE_REAL_CHATBOT === 'true';

/**
 * Respostas hardcoded para modo MVP (quando USE_REAL_CHATBOT=false)
 */
const HARDCODED_RESPONSES = {
  plantio: [
    'Para plantio de milho, recomendo solo bem drenado e pH entre 5,5 e 6,8. Posso conect√°-lo com especialistas em sua regi√£o.',
    'O melhor per√≠odo para plantio de soja √© entre setembro e dezembro. Quer dicas espec√≠ficas para sua regi√£o?',
    'Para plantio de feij√£o, considere a √©poca das √°guas (outubro-janeiro) ou da seca (mar√ßo-junho).',
    'O plantio de trigo requer clima temperado e solo f√©rtil. A melhor √©poca √© entre maio e julho.',
  ],
  pragas: [
    'Para controle de pragas, primeiro preciso identificar qual est√° afetando sua cultura. Pode descrever os sintomas?',
    'Lagarta-do-cartucho no milho? Recomendo monitoramento e controle integrado. Posso conect√°-lo com especialistas.',
    'Problemas com pulg√µes? Existem solu√ß√µes biol√≥gicas e qu√≠micas. Precisa de indica√ß√£o de fornecedores?',
    'Ferrugem asi√°tica na soja √© s√©ria! Recomendo aplica√ß√£o preventiva de fungicidas. Quer falar com um agr√¥nomo?',
  ],
  fertilizacao: [
    'A fertiliza√ß√£o ideal depende da an√°lise do solo. Temos parceiros que fazem an√°lise na sua regi√£o.',
    'Para NPK, recomendo an√°lise de solo primeiro. Posso conect√°-lo com laborat√≥rios credenciados.',
    'Aduba√ß√£o org√¢nica √© excelente! Quer dicas sobre compostagem ou fornecedores de adubo org√¢nico?',
    'Calagem √© importante para corrigir o pH do solo. J√° fez an√°lise do solo recentemente?',
  ],
  irrigacao: [
    'Sistema de irriga√ß√£o por gotejamento √© ideal para economizar √°gua. Temos parceiros especializados.',
    'Para irriga√ß√£o eficiente, considere hor√°rios adequados e monitoramento da umidade do solo.',
    'Problemas com irriga√ß√£o? Posso conect√°-lo com t√©cnicos especializados em sua regi√£o.',
    'Aspers√£o ou gotejamento? Depende da cultura e do seu or√ßamento. Posso te ajudar a escolher.',
  ],
  clima: [
    'As condi√ß√µes clim√°ticas s√£o fundamentais para o sucesso da safra. Voc√™ monitora a previs√£o do tempo?',
    'Geadas podem prejudicar muito sua lavoura. J√° pensou em sistemas de prote√ß√£o?',
    'Seca prolongada? Considere sistemas de irriga√ß√£o e culturas mais resistentes.',
  ],
  colheita: [
    'O momento ideal de colheita √© crucial! Qual cultura voc√™ est√° cultivando?',
    'Para determinar o ponto de colheita, observe a umidade dos gr√£os e a matura√ß√£o das plantas.',
    'Colheita mecanizada ou manual? Depende do tamanho da √°rea e do tipo de cultura.',
  ],
  maquinas: [
    'Manuten√ß√£o preventiva de m√°quinas agr√≠colas √© essencial. Voc√™ tem um plano de manuten√ß√£o?',
    'Para escolher o trator ideal, considere o tamanho da √°rea e o tipo de opera√ß√£o.',
    'Temos parceiros que oferecem financiamento para m√°quinas agr√≠colas. Quer saber mais?',
  ],
  saudacao: [
    'Ol√°! Sou o assistente virtual da AgroPrati. Como posso ajud√°-lo hoje?',
    'Oi! Bem-vindo √† AgroPrati! Em que posso auxili√°-lo?',
    'Ol√°, agricultor! Estou aqui para ajudar com suas d√∫vidas sobre plantio e manejo.',
    'E a√≠, compadre! Pronto para turbinar sua produ√ß√£o? Como posso te ajudar hoje?',
  ],
  default: [
    'Interessante! Para essa quest√£o espec√≠fica, recomendo conversar com um especialista. Posso conect√°-lo com profissionais qualificados.',
    'Essa √© uma √≥tima pergunta! Temos especialistas que podem ajudar melhor. Quer que eu encontre um em sua regi√£o?',
    'Para orienta√ß√µes mais detalhadas, sugiro consultar nossos parceiros especialistas. Posso fazer essa conex√£o para voc√™.',
    'N√£o tenho certeza sobre isso, mas posso te conectar com um especialista que vai saber te ajudar melhor!',
  ],
};

/**
 * Gera uma resposta hardcoded baseada na mensagem do usu√°rio
 */
const generateHardcodedResponse = (userMessage) => {
  const msg = userMessage.toLowerCase();

  // Sauda√ß√µes
  if (
    msg.includes('ol√°') ||
    msg.includes('oi') ||
    msg.includes('bom dia') ||
    msg.includes('boa tarde') ||
    msg.includes('boa noite')
  ) {
    return getRandomMessage(HARDCODED_RESPONSES.saudacao);
  }

  // Plantio
  if (msg.includes('plantio') || msg.includes('plantar') || msg.includes('semear') || msg.includes('cultivar')) {
    return getRandomMessage(HARDCODED_RESPONSES.plantio);
  }

  // Pragas
  if (
    msg.includes('praga') ||
    msg.includes('inseto') ||
    msg.includes('lagarta') ||
    msg.includes('pulg√£o') ||
    msg.includes('ferrugem') ||
    msg.includes('doen√ßa')
  ) {
    return getRandomMessage(HARDCODED_RESPONSES.pragas);
  }

  // Fertiliza√ß√£o
  if (
    msg.includes('adubo') ||
    msg.includes('fertilizante') ||
    msg.includes('npk') ||
    msg.includes('nutri√ß√£o') ||
    msg.includes('calagem')
  ) {
    return getRandomMessage(HARDCODED_RESPONSES.fertilizacao);
  }

  // Irriga√ß√£o
  if (msg.includes('irriga√ß√£o') || msg.includes('√°gua') || msg.includes('irrigar')) {
    return getRandomMessage(HARDCODED_RESPONSES.irrigacao);
  }

  // Clima
  if (
    msg.includes('clima') ||
    msg.includes('chuva') ||
    msg.includes('seca') ||
    msg.includes('geada') ||
    msg.includes('tempo')
  ) {
    return getRandomMessage(HARDCODED_RESPONSES.clima);
  }

  // Colheita
  if (msg.includes('colheita') || msg.includes('colher') || msg.includes('safra')) {
    return getRandomMessage(HARDCODED_RESPONSES.colheita);
  }

  // M√°quinas
  if (
    msg.includes('m√°quina') ||
    msg.includes('trator') ||
    msg.includes('equipamento') ||
    msg.includes('maquin√°rio')
  ) {
    return getRandomMessage(HARDCODED_RESPONSES.maquinas);
  }

  // Default
  return getRandomMessage(HARDCODED_RESPONSES.default);
};

/**
 * Retorna uma mensagem aleat√≥ria de um array
 */
const getRandomMessage = (messagesArray) => {
  return messagesArray[Math.floor(Math.random() * messagesArray.length)];
};

/**
 * Envia uma mensagem para o chatbot
 * @param {string} message - Mensagem do usu√°rio
 * @returns {Promise<string>} - Resposta do chatbot
 */
export const sendChatMessage = async (message) => {
  // Se usar respostas hardcoded (modo MVP)
  if (!USE_REAL_CHATBOT) {
    console.log('ü§ñ Usando respostas hardcoded (VITE_USE_REAL_CHATBOT=false)');
    // Simular delay de rede
    await new Promise((resolve) => setTimeout(resolve, 800));
    return generateHardcodedResponse(message);
  }

  // Usar API real do Gemini
  console.log('ü§ñ Usando API Gemini real (VITE_USE_REAL_CHATBOT=true)');
  try {
    const response = await fetch(`${CHATBOT_API_URL}/ask`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: message,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    // A API retorna {answer: "..."}
    if (data.answer) {
      return data.answer;
    } else if (data.error) {
      throw new Error(data.error);
    } else {
      throw new Error('Resposta inv√°lida da API');
    }
  } catch (error) {
    console.error('‚ùå Erro ao chamar API do chatbot:', error);
    
    // Fallback para respostas hardcoded em caso de erro
    console.log('‚ö†Ô∏è Usando fallback para respostas hardcoded');
    return generateHardcodedResponse(message);
  }
};

/**
 * Gera um plano de safra personalizado
 * @param {string[]} culturas - Array com nomes das culturas
 * @returns {Promise<string>} - Plano de safra gerado
 */
export const generatePlanoSafra = async (culturas) => {
  if (!culturas || culturas.length === 0) {
    throw new Error('Por favor, forne√ßa pelo menos uma cultura para o plano de safra.');
  }

  // Se usar respostas hardcoded
  if (!USE_REAL_CHATBOT) {
    console.log('üåæ Gerando plano de safra hardcoded');
    await new Promise((resolve) => setTimeout(resolve, 1200));
    
    return `# üåæ Plano de Safra Personalizado

## Culturas Selecionadas
${culturas.map(c => `- ${c}`).join('\n')}

## Cronograma Recomendado

### ${culturas[0]}
- **Preparo do Solo**: In√≠cio de setembro
- **Plantio**: Outubro a novembro
- **Tratos Culturais**: Monitoramento quinzenal de pragas
- **Colheita Estimada**: Mar√ßo a abril

${culturas.length > 1 ? `### ${culturas[1]}
- **Preparo do Solo**: In√≠cio de agosto
- **Plantio**: Setembro a outubro
- **Tratos Culturais**: Aduba√ß√£o e irriga√ß√£o regular
- **Colheita Estimada**: Janeiro a fevereiro` : ''}

## Dicas Importantes
- Monitore as condi√ß√µes clim√°ticas constantemente
- Fa√ßa an√°lise de solo antes do plantio
- Considere rota√ß√£o de culturas para melhor aproveitamento do solo
- Planeje sistemas de irriga√ß√£o adequados

*Nota: Este √© um plano b√°sico. Recomendamos consultar um agr√¥nomo para orienta√ß√µes espec√≠ficas da sua regi√£o.*`;
  }

  // Usar API real
  console.log('üåæ Gerando plano de safra com IA real');
  try {
    const response = await fetch(`${CHATBOT_API_URL}/planner`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        culturas: culturas,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.answer) {
      return data.answer;
    } else if (data.error) {
      throw new Error(data.error);
    } else {
      throw new Error('Resposta inv√°lida da API');
    }
  } catch (error) {
    console.error('‚ùå Erro ao gerar plano de safra:', error);
    throw error;
  }
};

/**
 * Calcula estimativa de aposentadoria rural
 * @param {Object} dados - Dados do trabalhador rural
 * @param {number} dados.idade - Idade atual
 * @param {string} dados.sexo - Sexo (masculino/feminino)
 * @param {number} dados.tempoTrabalhoRural - Anos de trabalho rural
 * @param {string} dados.tipoSegurado - Tipo de segurado
 * @returns {Promise<string>} - Estimativa de aposentadoria
 */
export const calcularAposentadoria = async (dados) => {
  const { idade, sexo, tempoTrabalhoRural, tipoSegurado } = dados;

  // Valida√ß√µes b√°sicas
  if (!idade || !sexo || !tempoTrabalhoRural || !tipoSegurado) {
    throw new Error('Por favor, preencha todos os campos para calcular a aposentadoria.');
  }

  // Se usar respostas hardcoded
  if (!USE_REAL_CHATBOT) {
    console.log('üìä Calculando aposentadoria (hardcoded)');
    await new Promise((resolve) => setTimeout(resolve, 1000));

    const idadeAposentadoria = sexo === 'masculino' ? 60 : 55;
    const tempoMinimo = 15;
    const tempoFaltante = Math.max(0, tempoMinimo - tempoTrabalhoRural);
    const idadeFaltante = Math.max(0, idadeAposentadoria - idade);
    
    const podeAposentar = tempoFaltante === 0 && idadeFaltante === 0;

    return `# üìä Estimativa de Aposentadoria Rural

## Seus Dados
- **Idade atual**: ${idade} anos
- **Sexo**: ${sexo}
- **Tempo de trabalho rural**: ${tempoTrabalhoRural} anos
- **Tipo de segurado**: ${tipoSegurado}

## Requisitos para Aposentadoria (${tipoSegurado})
- **Idade m√≠nima**: ${idadeAposentadoria} anos
- **Tempo m√≠nimo de contribui√ß√£o**: ${tempoMinimo} anos

## Situa√ß√£o Atual
${podeAposentar 
  ? '‚úÖ **Voc√™ j√° pode se aposentar!**\n\nRecomendamos procurar o INSS para dar entrada no benef√≠cio.'
  : `‚è≥ **Ainda n√£o pode se aposentar**

**Falta:**
${idadeFaltante > 0 ? `- ${idadeFaltante} anos de idade` : ''}
${tempoFaltante > 0 ? `- ${tempoFaltante} anos de tempo de contribui√ß√£o` : ''}

**Previs√£o de aposentadoria:** ${idade + Math.max(idadeFaltante, tempoFaltante)} anos`
}

## Pr√≥ximos Passos
1. Continue contribuindo regularmente
2. Guarde todos os documentos que comprovam trabalho rural
3. Acompanhe sua situa√ß√£o no Meu INSS
4. Consulte um advogado previdenci√°rio para orienta√ß√µes espec√≠ficas

*Nota: Esta √© uma estimativa b√°sica. As regras podem variar. Consulte o INSS para informa√ß√µes precisas.*`;
  }

  // Usar API real
  console.log('üìä Calculando aposentadoria com IA real');
  try {
    const response = await fetch(`${CHATBOT_API_URL}/calculate_retirement`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        idade: parseInt(idade),
        sexo,
        tempo_trabalho_rural: parseInt(tempoTrabalhoRural),
        tipo_segurado: tipoSegurado,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.answer) {
      return data.answer;
    } else if (data.error) {
      throw new Error(data.error);
    } else {
      throw new Error('Resposta inv√°lida da API');
    }
  } catch (error) {
    console.error('‚ùå Erro ao calcular aposentadoria:', error);
    throw error;
  }
};

/**
 * Verifica se o chatbot est√° online
 * @returns {Promise<boolean>}
 */
export const checkChatbotHealth = async () => {
  if (!USE_REAL_CHATBOT) {
    return true; // Sempre dispon√≠vel em modo hardcoded
  }

  try {
    const response = await fetch(`${CHATBOT_API_URL}/`, {
      method: 'GET',
      timeout: 5000,
    });
    return response.ok;
  } catch (error) {
    console.warn('‚ö†Ô∏è Chatbot API n√£o est√° dispon√≠vel:', error.message);
    return false;
  }
};

/**
 * Retorna informa√ß√µes sobre o modo atual do chatbot
 * @returns {Object}
 */
export const getChatbotInfo = () => {
  return {
    mode: USE_REAL_CHATBOT ? 'real' : 'hardcoded',
    apiUrl: CHATBOT_API_URL,
    description: USE_REAL_CHATBOT
      ? 'Usando intelig√™ncia artificial real (Google Gemini)'
      : 'Usando respostas pr√©-definidas (Modo MVP)',
  };
};

export default {
  sendChatMessage,
  generatePlanoSafra,
  calcularAposentadoria,
  checkChatbotHealth,
  getChatbotInfo,
};
