import React, { useState, useEffect, useRef } from 'react';
import './Chatbot.css';

const Chatbot = ({ initialOpen = false, onToggle }) => {
  const [isOpen, setIsOpen] = useState(initialOpen);
  const [messages, setMessages] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const messagesContainerRef = useRef(null);
  const inputRef = useRef(null);

  // Mensagens predefinidas baseadas no prot√≥tipo
  const predefinedMessages = {
    saudacao: [
      'Ol√°! Sou o assistente virtual da AgroPrati. Como posso ajud√°-lo hoje?',
      'Oi! Bem-vindo √† AgroPrati! Em que posso auxili√°-lo?',
      'Ol√°, agricultor! Estou aqui para ajudar com suas d√∫vidas sobre plantio e manejo.',
    ],
    plantio: [
      'Para plantio de milho, recomendo solo bem drenado e pH entre 5,5 e 6,8. Posso conect√°-lo com especialistas em sua regi√£o.',
      'O melhor per√≠odo para plantio de soja √© entre setembro e dezembro. Quer dicas espec√≠ficas para sua regi√£o?',
      'Para plantio de feij√£o, considere a √©poca das √°guas (outubro-janeiro) ou da seca (mar√ßo-junho).',
    ],
    pragas: [
      'Para controle de pragas, primeiro preciso identificar qual est√° afetando sua cultura. Pode descrever os sintomas?',
      'Lagarta-do-cartucho no milho? Recomendo monitoramento e controle integrado. Posso conect√°-lo com especialistas.',
      'Problemas com pulg√µes? Existem solu√ß√µes biol√≥gicas e qu√≠micas. Precisa de indica√ß√£o de fornecedores?',
    ],
    fertilizacao: [
      'A fertiliza√ß√£o ideal depende da an√°lise do solo. Temos parceiros que fazem an√°lise na sua regi√£o.',
      'Para NPK, recomendo an√°lise de solo primeiro. Posso conect√°-lo com laborat√≥rios credenciados.',
      'Aduba√ß√£o org√¢nica √© excelente! Quer dicas sobre compostagem ou fornecedores de adubo org√¢nico?',
    ],
    irrigacao: [
      'Sistema de irriga√ß√£o por gotejamento √© ideal para economizar √°gua. Temos parceiros especializados.',
      'Para irriga√ß√£o eficiente, considere hor√°rios adequados e monitoramento da umidade do solo.',
      'Problemas com irriga√ß√£o? Posso conect√°-lo com t√©cnicos especializados em sua regi√£o.',
    ],
    default: [
      'Interessante! Para essa quest√£o espec√≠fica, recomendo conversar com um especialista. Posso conect√°-lo com profissionais qualificados.',
      'Essa √© uma √≥tima pergunta! Temos especialistas que podem ajudar melhor. Quer que eu encontre um em sua regi√£o?',
      'Para orienta√ß√µes mais detalhadas, sugiro consultar nossos parceiros especialistas. Posso fazer essa conex√£o para voc√™.',
    ],
  };

  // Scroll autom√°tico para mensagens novas
  const scrollToBottom = () => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  // Mensagem inicial de boas-vindas
  useEffect(() => {
    const welcomeMessage = {
      id: Date.now(),
      type: 'bot',
      text: 'Ol√°! Eu sou o AgroBot, seu assistente agr√≠cola inteligente. Como posso ajud√°-lo hoje? üå±',
      timestamp: new Date(),
    };
    setMessages([welcomeMessage]);
  }, []);

  // Gerar resposta baseada na mensagem do usu√°rio
  const generateResponse = (userMessage) => {
    const msg = userMessage.toLowerCase();

    if (msg.includes('plantio') || msg.includes('plantar') || msg.includes('semear')) {
      return getRandomMessage(predefinedMessages.plantio);
    } else if (
      msg.includes('praga') ||
      msg.includes('inseto') ||
      msg.includes('lagarta') ||
      msg.includes('pulg√£o')
    ) {
      return getRandomMessage(predefinedMessages.pragas);
    } else if (
      msg.includes('adubo') ||
      msg.includes('fertilizante') ||
      msg.includes('npk') ||
      msg.includes('nutri√ß√£o')
    ) {
      return getRandomMessage(predefinedMessages.fertilizacao);
    } else if (msg.includes('irriga√ß√£o') || msg.includes('√°gua') || msg.includes('irrigar')) {
      return getRandomMessage(predefinedMessages.irrigacao);
    } else {
      return getRandomMessage(predefinedMessages.default);
    }
  };

  const getRandomMessage = (messagesArray) => {
    return messagesArray[Math.floor(Math.random() * messagesArray.length)];
  };

  // Adicionar mensagem do usu√°rio
  const addUserMessage = (text) => {
    const newMessage = {
      id: Date.now(),
      type: 'user',
      text: text,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, newMessage]);
  };

  // Adicionar mensagem do bot
  const addBotMessage = (text) => {
    const newMessage = {
      id: Date.now() + 1,
      type: 'bot',
      text: text,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, newMessage]);
  };

  // Enviar mensagem
  const handleSendMessage = () => {
    const message = inputValue.trim();
    if (!message) return;

    addUserMessage(message);
    setInputValue('');
    setIsTyping(true);

    // Simular delay de resposta
    setTimeout(() => {
      setIsTyping(false);
      const response = generateResponse(message);
      addBotMessage(response);
    }, 1500);
  };

  // Enviar sugest√£o
  const handleSendSuggestion = (suggestion) => {
    setInputValue(suggestion);
    handleSendMessage();
  };

  // Toggle chat
  const toggleChat = () => {
    const newState = !isOpen;
    setIsOpen(newState);
    if (onToggle) onToggle(newState);

    // Focus no input quando abrir
    if (newState) {
      setTimeout(() => inputRef.current?.focus(), 100);
    }
  };

  // Handle key press
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Chatbot Widget */}
      <div className={`chatbot-widget ${isOpen ? 'open' : ''}`}>
        <div className="chatbot-header">
          <div className="chatbot-title">
            <i className="fas fa-robot"></i>
            <span>AgroBot</span>
          </div>
          <button className="chatbot-close" onClick={toggleChat} aria-label="Fechar chat">
            <i className="fas fa-times"></i>
          </button>
        </div>

        <div className="chatbot-messages" ref={messagesContainerRef} role="log" aria-live="polite">
          {messages.map((message) => (
            <div key={message.id} className={`${message.type}-message`}>
              <div className="message-avatar">
                <i className={message.type === 'bot' ? 'fas fa-robot' : 'fas fa-user'}></i>
              </div>
              <div className="message-content">{message.text}</div>
            </div>
          ))}

          {isTyping && (
            <div className="bot-message typing-indicator">
              <div className="message-avatar">
                <i className="fas fa-robot"></i>
              </div>
              <div className="message-content">
                <span className="typing-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </span>
              </div>
            </div>
          )}
        </div>

        <div className="chatbot-input">
          <input
            ref={inputRef}
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Digite sua pergunta sobre agricultura..."
            aria-label="Digite sua mensagem"
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputValue.trim()}
            aria-label="Enviar mensagem"
          >
            <i className="fas fa-paper-plane"></i>
          </button>
        </div>

        <div className="chatbot-suggestions">
          <button
            className="suggestion-btn"
            onClick={() => handleSendSuggestion('Como plantar milho?')}
          >
            Como plantar milho?
          </button>
          <button className="suggestion-btn" onClick={() => handleSendSuggestion('Pragas na soja')}>
            Pragas na soja
          </button>
          <button
            className="suggestion-btn"
            onClick={() => handleSendSuggestion('Irriga√ß√£o eficiente')}
          >
            Irriga√ß√£o eficiente
          </button>
        </div>
      </div>

      {/* Toggle Button */}
      <button
        className="chatbot-toggle"
        onClick={toggleChat}
        aria-label={isOpen ? 'Fechar chat' : 'Abrir chat'}
      >
        <i className={isOpen ? 'fas fa-times' : 'fas fa-comments'}></i>
      </button>
    </>
  );
};

export default Chatbot;
